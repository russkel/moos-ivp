name: Build MOOS-IvP

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Get ubuntu release name
      id: get_release_name
      run: |
        echo "::set-output name=release_name::`lsb_release -cs`"

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      if: matrix.os == 'ubuntu-22.04'
      with:
        languages: cpp

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: 'russkel/core-moos'
        version: 'latest'
        file: '^moos-core-.*-${{ steps.get_release_name.outputs.release_name }}-x86_64\.deb$'
        regex: true
        target: '${{ github.workspace }}/deps/'

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: 'russkel/geodesy-moos'
        version: 'latest'
        file: '^MOOSGeodesy-.*-${{ steps.get_release_name.outputs.release_name }}-x86_64\.deb$'
        regex: true
        target: '${{ github.workspace }}/deps/'

    - name: Install moos and deps
      run: |
        sudo apt-get install ./deps/*.deb
        sudo apt-get install libfltk1.3-dev

    - name: Cache Build
      id: cache-build
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-${{ steps.get_release_name.outputs.release_name }}-${{ github.sha }}

    - name: cmake and build
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release ../ivp/src
        make

    - name: Perform CodeQL Analysis
      if: steps.cache-build.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-22.04'
      uses: github/codeql-action/analyze@v2

    - name: package
      run: |
        cd build
        rm -rf artifacts && mkdir artifacts
        cpack -G DEB -D CPACK_OUTPUT_FILE_PREFIX=artifacts
        dpkg -I artifacts/*.deb
        dpkg --contents artifacts/*.deb

    - uses: actions/upload-artifact@v3
      with:
        name: deb
        path: build/artifacts

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download deb from build
      uses: actions/download-artifact@v3
      with:
        name: deb
        path: deb

    - name: Get File Name
      id: get_filename
      run: |
        echo "::set-output name=short_sha::`echo ${GITHUB_SHA} | cut -c1-8`"

    - name: Create Release
      id: create_release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: ivp snapshot-${{ steps.get_filename.outputs.short_sha }}
        draft: true
        files: deb/*.deb
